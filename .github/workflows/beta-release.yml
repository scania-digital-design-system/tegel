name: Beta Release

on:
  workflow_dispatch:
    inputs:
      nodeVersion:
        description: 'Node version'
        required: true
        default: '20.9.0'
        type: string
      betaVersionSuffix:
        description: 'Beta version suffix (e.g., beta.0, beta.1)'
        required: true
        default: 'beta.0'
        type: string
      includeAngular17:
        description: 'Include Angular 17 package?'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      includeAngular:
        description: 'Include Angular package?'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      includeReact:
        description: 'Include React package?'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  beta-release-core:
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: packages/core
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.nodeVersion }}
          registry-url: 'https://registry.npmjs.org/'

      - name: Set Tegel user
        run: |
          git config --global user.name "Tegel - Scania"
          git config --global user.email "tegel.design.system@gmail.com"

      - name: Core - Update version with beta name
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          current_version=$(jq -r '.version' package.json)
          beta_version_suffix="${{ inputs.betaVersionSuffix }}"
          new_version="${current_version}-${beta_version_suffix}"
          echo "Updating package.json version to $new_version"
          jq ".version = \"$new_version\"" package.json > package.tmp.json
          mv package.tmp.json package.json

      - name: Core - Read Package.json Version
        id: version
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: echo "PACKAGE_VERSION=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Install dependencies in root
        run: npm install

      - name: Core - Install
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm install

      - name: Core - Run build
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build

      - name: Core - Publish
        if: steps.check_version.outputs.publish == 'true'
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public --tag beta

      - name: Core - Create git tag
        if: steps.check_version.outputs.publish == 'true'
        run: git tag @scania/tegel@${{ steps.version.outputs.PACKAGE_VERSION }}

      - name: Core - Push git tag
        if: steps.check_version.outputs.publish == 'true'
        run: git push --no-verify origin @scania/tegel@${{ steps.version.outputs.PACKAGE_VERSION }}

    outputs:
      version: ${{ steps.version.outputs.PACKAGE_VERSION }}

  release-angular-17:
    needs: beta-release-core
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: packages/angular-17
    steps:
      - name: Check if Angular 17 release is enabled
        run: |
          if [ "${{ github.event.inputs.includeAngular17 }}" != "true" ]; then
          echo "Angular 17 release not enabled. Skipping job."
          exit 0
          fi
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.nodeVersion }}
          registry-url: 'https://registry.npmjs.org'

      - name: Set Tegel user
        run: |
          git config --global user.name "Tegel - Scania"
          git config --global user.email "tegel.design.system@gmail.com"

      - name: Install dependencies in root
        run: npm install

      - name: Core - Install
        working-directory: packages/core
        run: npm install

      - name: Angular-17 workspace - Install
        working-directory: packages/angular-17
        run: npm install

      - name: Update @scania/tegel peerDependency in Angular-17 workspace
        working-directory: packages/angular-17
        run: |
          echo "Updating @scania/tegel to version ${{ needs.beta-release-core.outputs.version }} in package.json"
          jq ".peerDependencies[\"@scania/tegel\"] = \"${{ needs.beta-release-core.outputs.version }}\"" package.json > package.tmp.json
          mv package.tmp.json package.json

      - name: Angular-17 wrapper - Install
        working-directory: packages/angular-17/projects/components
        run: npm install

      - name: Update @scania/tegel peerDependency and version in Angular-17 wrapper
        working-directory: packages/angular-17/projects/components
        run: |
          echo "Updating @scania/tegel to version ${{ needs.beta-release-core.outputs.version }} and setting package version"
          NEW_VERSION="${{ needs.beta-release-core.outputs.version }}-${{ inputs.betaVersionSuffix }}"
          jq ".peerDependencies[\"@scania/tegel\"] = \"${{ needs.beta-release-core.outputs.version }}\" | .version = \"$NEW_VERSION\"" package.json > package.tmp.json
          mv package.tmp.json package.json
          echo "PACKAGE_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Install @scania/tegel as dev dependency for build
        working-directory: packages/angular-17/projects/components
        run: npm install @scania/tegel@${{ needs.beta-release-core.outputs.version }} --save-dev

      - name: Angular-17 - Run build
        run: npm run build-angular-17

      - name: Angular-17 - Publish
        working-directory: packages/angular-17/dist/components
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public --tag beta

      - name: Create git tag
        run: git tag @scania/tegel-angular-17@${{ steps.version.outputs.PACKAGE_VERSION }}

      - name: Push git tag
        run: git push --no-verify origin @scania/tegel-angular-17@${{ steps.version.outputs.PACKAGE_VERSION }}

    outputs:
      version: ${{ steps.version.outputs.PACKAGE_VERSION }}

  on-failure-angular-17:
    if: always() && needs.release-angular-17.result == 'failure' && inputs.includeAngular17 == 'true'
    needs: release-angular-17
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Remove git tag on failure
        run: |
          tagname="@scania/tegel-angular-17@${{ needs.release-angular-17.outputs.version }}"
          if git rev-parse $tagname >/dev/null 2>&1; then
            git push --no-verify --delete origin $tagname
          fi

  beta-release-angular:
    needs: beta-release-core
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: packages/angular
    steps:
      - name: Check if Angular release is enabled
        run: |
          if [ "${{ github.event.inputs.includeAngular }}" != "true" ]; then
          echo "Angular release not enabled. Skipping job."
          exit 0
          fi
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.nodeVersion }}
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git user
        run: |
          git config --global user.name "Tegel - Scania"
          git config --global user.email "tegel.design.system@gmail.com"

      - name: Install root dependencies
        run: npm install

      - name: Install Core dependencies
        working-directory: packages/core
        run: npm install

      - name: Update Angular package version and dependency
        working-directory: packages/angular
        run: |
          NEW_VERSION="${{ needs.beta-release-core.outputs.version }}-${{ inputs.betaVersionSuffix }}"
          jq ".version = \"$NEW_VERSION\" | .dependencies[\"@scania/tegel\"] = \"${{ needs.beta-release-core.outputs.version }}\"" package.json > package.tmp.json
          mv package.tmp.json package.json
          echo "PACKAGE_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Install Angular dependencies
        working-directory: packages/angular
        run: npm install

      - name: Build Angular package
        run: npm run build-angular

      - name: Publish Angular package to NPM
        working-directory: packages/angular
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --tag beta

      - name: Commit and Push changes
        run: |
          git add packages/angular/package.json
          git commit -m "chore(release): ${{ needs.beta-release-core.outputs.version }}-${{ inputs.betaVersionSuffix }} [skip ci]"
          git tag @scania/tegel-angular@${{ needs.beta-release-core.outputs.version }}-${{ inputs.betaVersionSuffix }}
          git push origin develop --tags
        env:
          GIT_AUTHOR_NAME: 'Tegel - Scania'
          GIT_AUTHOR_EMAIL: 'tegel.design.system@gmail.com'
          GIT_COMMITTER_NAME: 'Tegel - Scania'
          GIT_COMMITTER_EMAIL: 'tegel.design.system@gmail.com'

    outputs:
      version: ${{ needs.beta-release-core.outputs.version }}-${{ inputs.betaVersionSuffix }}

  on-failure-angular:
    if: always() && needs.beta-release-angular.result == 'failure' && inputs.includeAngular == 'true'
    needs: beta-release-angular
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Remove git tag on failure
        run: |
          tagname="@scania/tegel-angular@${{ needs.beta-release-angular.outputs.version }}"
          if git rev-parse $tagname >/dev/null 2>&1; then
            git push --no-verify --delete origin $tagname
          fi

  beta-release-react:
    needs: beta-release-core
    runs-on: ubuntu-latest
    steps:
      - name: Check if React release is enabled
        run: |
          if [ "${{ github.event.inputs.includeReact }}" != "true" ]; then
          echo "React release not enabled. Skipping job."
          exit 0
          fi

      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.nodeVersion }}
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git user
        run: |
          git config --global user.name "Tegel - Scania"
          git config --global user.email "tegel.design.system@gmail.com"

      - name: Install root dependencies
        run: npm install

      - name: Install Core dependencies
        working-directory: packages/core
        run: npm install

      - name: Update React package version and dependency
        working-directory: packages/react
        run: |
          NEW_VERSION="${{ needs.beta-release-core.outputs.version }}-${{ inputs.betaVersionSuffix }}"
          jq ".version = \"$NEW_VERSION\" | .dependencies[\"@scania/tegel\"] = \"${{ needs.beta-release-core.outputs.version }}\"" package.json > package.tmp.json
          mv package.tmp.json package.json
          echo "PACKAGE_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Install React dependencies
        working-directory: packages/react
        run: npm install

      - name: Build React package
        run: npm run build-react

      - name: Publish React package to NPM
        working-directory: packages/react
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --tag beta

      - name: Commit and Push changes
        run: |
          git add packages/react/package.json
          git commit -m "chore(release): ${{ needs.beta-release-core.outputs.version }}-${{ inputs.betaVersionSuffix }} [skip ci]"
          git tag @scania/tegel-react@${{ needs.beta-release-core.outputs.version }}-${{ inputs.betaVersionSuffix }}
          git push origin develop --tags
        env:
          GIT_AUTHOR_NAME: 'Tegel - Scania'
          GIT_AUTHOR_EMAIL: 'tegel.design.system@gmail.com'
          GIT_COMMITTER_NAME: 'Tegel - Scania'
          GIT_COMMITTER_EMAIL: 'tegel.design.system@gmail.com'

    outputs:
      version: ${{ needs.beta-release-core.outputs.version }}-${{ inputs.betaVersionSuffix }}

  on-failure-react:
    if: always() && needs.beta-release-react.result == 'failure' && inputs.includeReact == 'true'
    needs: beta-release-react
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Remove git tag on failure
        run: |
          tagname="@scania/tegel-react@${{ needs.beta-release-react.outputs.version }}"
          if git rev-parse $tagname >/dev/null 2>&1; then
            git push --no-verify --delete origin $tagname
          fi
