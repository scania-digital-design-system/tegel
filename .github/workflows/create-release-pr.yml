name: Manual Create Release PR
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - minor
          - patch

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: develop

      # Delete 'minor' branch on remote if it exists
      - name: Delete 'minor' branch on remote
        run: |
          if git ls-remote --heads origin minor; then
            git push origin --delete minor
          else
            echo "Minor branch does not exist on remote, skipping deletion."
          fi

      # Delete 'patch' branch on remote if it exists
      - name: Delete 'patch' branch on remote
        run: |
          if git ls-remote --heads origin patch; then
            git push origin --delete patch
          else
            echo "Patch branch does not exist on remote, skipping deletion."
          fi

      - name: Create release branch
        run: |
          git checkout -b release/tegel@${{ github.event.inputs.version }}
          git push -u origin release/tegel@${{ github.event.inputs.version }}

      - name: Set Tegel user
        run: git config --global user.name "Tegel - Scania" && git config --global user.email "tegel.design.system@gmail.com"

      - name: Core - Bump version
        id: core-version
        working-directory: packages/core
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Angular - Bump version
        id: angular-version
        working-directory: packages/angular
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: React - Bump version
        id: react-version
        working-directory: packages/react
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Core - Read package.json Version
        id: version
        working-directory: packages/core
        run: echo "PACKAGE_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Save version as artifact
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: packages/core/package.json

      - name: Create PR
        uses: peter-evans/create-pull-request@v5
        with:
          title: 'release: @scania/tegel@${{ env.PACKAGE_VERSION }}'
          commit-message: Release of @scania/tegel@${{ env.PACKAGE_VERSION }}
          branch: release/tegel@${{ env.PACKAGE_VERSION }}
          base: develop

  on-failure:
    needs: create-release-pr
    runs-on: ubuntu-latest
    if: always() && needs.create-release-pr.result == 'failure'
    steps:
      - name: Download version
        uses: actions/download-artifact@v2
        with:
          name: version
          path: packages/core

      - name: Remove branch on failure
        run: |
          version=$(jq -r .version packages/core/package.json)  # extract version from package.json
          if [ "${{ job.status }}" == "failure" ] && [ -n "$version" ]; then
            git push origin --delete release/tegel@$version
          fi
