# Holy Grail: all release steps in one workflow

name: Holy Grail
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - minor
          - patch

      nodeVersion:
        description: 'Node version'
        required: true
        default: '22.11.0'
        type: string

      tags:
        description: 'Tag'
        required: true
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - dev

      dryVersion:
        description: 'Dry version'
        required: false
        type: boolean
        default: false

  schedule:
    - cron: '0 3 * * 1-5' #3AM every weekday

jobs:
  #CREATE RELEASE BRANCH
  create-release-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: testing-holy-grail

      - name: Set Tegel user
        run: git config --global user.name "Tegel - Scania" && git config --global user.email "tegel.design.system@gmail.com"

      - name: Core - Bump version
        id: core-version
        working-directory: packages/core
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Angular - Bump version
        id: angular-version
        working-directory: packages/angular
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Angular 17 - Bump version
        id: angular-17-version
        working-directory: packages/angular-17/projects/components
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: React - Bump version
        id: react-version
        working-directory: packages/react
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Core - Read package.json Version
        id: version
        working-directory: packages/core
        run: echo "PACKAGE_VERSION=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Save version as artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: packages/core/package.json # assuming the version is saved here

      - name: Create release branch
        id: create_branch
        run: |
          BRANCH_NAME=release/tegel@${{ steps.version.outputs.PACKAGE_VERSION }}
          if [[ "${{ github.event.inputs.dryVersion }}" == "true" || "${{ github.event_name }}" == "schedule" ]]; then
            TIMESTAMP=$(TZ=Europe/Stockholm date +'%Y%m%d-%H%M')
            BRANCH_NAME="$BRANCH_NAME-dry-run-$TIMESTAMP"
          fi
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git checkout -b "$BRANCH_NAME"
          git add .
          git commit -m "chore: bump versions to ${{ steps.version.outputs.PACKAGE_VERSION }}"
          git push -u --no-verify origin "$BRANCH_NAME"

    #Need to output the version to use it in the next jobs
    outputs:
      version: ${{ steps.version.outputs.PACKAGE_VERSION }}
      branch: ${{ steps.create_branch.outputs.branch }}

  #RELEASE CORE
  release-core:
    needs: create-release-branch
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: packages/core
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release-branch.outputs.branch }}
          fetch-depth: 0 # Fetch all branches
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }} # Use the token for authentication

      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ github.event.inputs.nodeVersion }}
          registry-url: 'https://registry.npmjs.org'

      - name: Set up Git for authentication
        run: |
          git config --global user.name "Tegel - Scania"
          git config --global user.email "tegel.design.system@gmail.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}

      - name: Core - Read Package.json Version
        id: version
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: echo "PACKAGE_VERSION=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Install dependencies in root
        run: npm ci

      - name: Core - Install
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Core - Run build
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build

        ## Consider to remove this step after bumping stencil
      - name: Core - Run build 2
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build
        ##

      - name: Core - Pack tarball (dry run only)
        if: github.event.inputs.dryVersion == 'true' || github.event_name == 'schedule'
        id: pack
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          TARBALL=$(npm pack)
          echo "TARBALL=$TARBALL" >> $GITHUB_OUTPUT

      - name: Upload Core tarball
        if: github.event.inputs.dryVersion == 'true' || github.event_name == 'schedule'
        uses: actions/upload-artifact@v4
        with:
          name: core-tarball
          path: ${{ env.WORKING_DIRECTORY }}/${{ steps.pack.outputs.TARBALL }}

      - name: Core - Publish
        if: github.event.inputs.dryVersion != 'true' && github.event_name != 'schedule'
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm publish --tag ${{ github.event.inputs.tags }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Core - Commit and push changes
        run: |
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "ci(release-core-step): files changed in release"
            git push --force --no-verify
          else
            echo "No changes to commit"
          fi
    outputs:
      tarball: ${{ steps.pack.outputs.TARBALL }}

  #BUMP WRAPPERS TO NEW VERSION
  bump-wrappers-to-new-version:
    needs: [release-core, create-release-branch]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release-branch.outputs.branch }}
          fetch-depth: 1 # Fetch just the release branch

      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ github.event.inputs.nodeVersion }}
          registry-url: 'https://registry.npmjs.org'

      - name: Set Tegel user
        run: git config --global user.name "Tegel - Scania" && git config --global user.email "tegel.design.system@gmail.com"

      - name: Download Core tarball
        if: github.event.inputs.dryVersion == 'true' || github.event_name == 'schedule'
        uses: actions/download-artifact@v4
        with:
          name: core-tarball
          path: core-tarball
          extract: true

      - name: Angular wrapper – install Core tarball (dry run)
        if: github.event.inputs.dryVersion == 'true' || github.event_name == 'schedule'
        working-directory: packages/angular
        run: |
          npm install ../../core-tarball/*.tgz

      - name: Angular 17 wrapper – install Core tarball (dry run)
        if: github.event.inputs.dryVersion == 'true' || github.event_name == 'schedule'
        working-directory: packages/angular-17
        run: |
          npm install ../../core-tarball/*.tgz

      - name: Angular 17 Components wrapper – install Core tarball (dry run)
        if: github.event.inputs.dryVersion == 'true' || github.event_name == 'schedule'
        working-directory: packages/angular-17/projects/components
        run: |
          npm install ../../../../core-tarball/*.tgz

      - name: React wrapper – install Core tarball (dry run)
        if: github.event.inputs.dryVersion == 'true' || github.event_name == 'schedule'
        working-directory: packages/react
        run: |
          npm install ../../core-tarball/*.tgz

      - name: Angular - Install latest tegel package
        if: github.event.inputs.dryVersion != 'true' && github.event_name != 'schedule'
        working-directory: packages/angular
        run: npm install @scania/tegel@${{ needs.create-release-branch.outputs.version }}

      - name: Angular 17 - Install latest tegel package
        if: github.event.inputs.dryVersion != 'true' && github.event_name != 'schedule'
        working-directory: packages/angular-17
        run: npm install @scania/tegel@${{ needs.create-release-branch.outputs.version }}

      - name: Angular 17 components - Install latest tegel package
        if: github.event.inputs.dryVersion != 'true' && github.event_name != 'schedule'
        working-directory: packages/angular-17/projects/components
        run: npm install @scania/tegel@${{ needs.create-release-branch.outputs.version }}

      - name: React - Install latest tegel package
        if: github.event.inputs.dryVersion != 'true' && github.event_name != 'schedule'
        working-directory: packages/react
        run: npm install @scania/tegel@${{ needs.create-release-branch.outputs.version }}

      - name: Wrappers Core increase - Commit and push changes
        run: |
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "ci(wrappers-increase-step): files changed in release"
            git push --force --no-verify
          else
            echo "No changes to commit"
          fi

  #RELEASE ANGULAR
  release-angular:
    needs: [create-release-branch, release-core, bump-wrappers-to-new-version]
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: packages/angular
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release-branch.outputs.branch }}
          fetch-depth: 1 # Fetch just the release branch

      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ github.event.inputs.nodeVersion }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies in root
        run: npm ci

      - name: Core - Install
        working-directory: packages/core
        run: npm ci

      - name: Angular - Install
        working-directory: packages/angular
        run: npm ci

      - name: Angular - Run build
        run: npm run build:angular

      - name: Angular - Publish
        if: github.event.inputs.dryVersion != 'true' && github.event_name != 'schedule'
        working-directory: packages/angular
        run: npm publish --tag ${{ github.event.inputs.tags }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  #RELEASE ANGULAR 17
  release-angular-17:
    needs: [create-release-branch, release-core, bump-wrappers-to-new-version]
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: packages/angular-17
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release-branch.outputs.branch }}
          fetch-depth: 1 # Fetch just the release branch

      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ github.event.inputs.nodeVersion }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies in root
        run: npm ci

      - name: Core - Install
        working-directory: packages/core
        run: npm ci

      - name: Angular-17 workspace - Install
        working-directory: packages/angular-17
        run: npm ci

      - name: Angular-17 wrapper - Install
        working-directory: packages/angular-17/projects/components
        run: npm ci

      - name: Angular-17 - Run build
        run: npm run build:angular-17

      - name: Angular-17 - Publish
        if: github.event.inputs.dryVersion != 'true' && github.event_name != 'schedule'
        working-directory: packages/angular-17/dist/components
        run: npm publish --tag ${{ github.event.inputs.tags }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  #RELEASE REACT
  release-react:
    needs: [create-release-branch, release-core, bump-wrappers-to-new-version]
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: packages/react
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release-branch.outputs.branch }}
          fetch-depth: 1 # Fetch just the release branch

      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ github.event.inputs.nodeVersion }}
          registry-url: 'https://registry.npmjs.org'

      - name: React - Read package.json Version
        id: version
        working-directory: packages/react
        run: echo "PACKAGE_VERSION=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Install dependencies in root
        run: npm ci

      - name: Core - Install
        working-directory: packages/core
        run: npm ci

      - name: React - Install
        working-directory: packages/react
        run: npm ci

      - name: React - Build
        run: npm run build:react

      - name: React - Publish
        if: github.event.inputs.dryVersion != 'true' && github.event_name != 'schedule'
        working-directory: packages/react
        run: npm publish --tag ${{ github.event.inputs.tags }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  #ON FAILURE
  on-failure:
    needs: [create-release-branch, release-core, release-angular, release-angular-17, release-react]
    runs-on: ubuntu-latest
    if: github.event.inputs.dryVersion != 'true' && github.event_name != 'schedule' && (needs.create-release-branch.result == 'failure' || needs.release-core.result == 'failure' || needs.release-angular.result == 'failure' || needs.release-angular-17.result == 'failure' || needs.release-react.result == 'failure')
    steps:
      - name: Download version
        uses: actions/download-artifact@v4
        with:
          name: version
          path: packages/core

      - name: Remove branch on failure
        run: git push --no-verify origin --delete release/tegel@${{ needs.create-release-branch.outputs.version }}

  #MERGE RELEASE BRANCH TO DEVELOP
  merge-release-branch-into-develop:
    needs: [create-release-branch, release-core, release-angular, release-angular-17, release-react]
    runs-on: ubuntu-latest
    if: github.event.inputs.dryVersion != 'true' && github.event_name != 'schedule' && (needs.create-release-branch.result == 'success' && needs.release-core.result == 'success' && needs.release-angular.result == 'success' && needs.release-angular-17.result == 'success' && needs.release-react.result == 'success')
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release-branch.outputs.branch }}
          fetch-depth: 0 # Fetch all branches
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

      - name: Fetch all branches
        run: git fetch --all

      - name: Set up Git for authentication
        run: |
          git config --global user.name "Tegel - Scania"
          git config --global user.email "tegel.design.system@gmail.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}

      - name: Merge release branch into develop
        run: |
          git checkout develop
          git merge --squash -X theirs release/tegel@${{ needs.create-release-branch.outputs.version }}
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "release: tegel ${{ needs.create-release-branch.outputs.version  }}"
            git push --force --no-verify origin develop
          else
            echo "No changes to commit in develop"
          fi

  #CREATE GIT TAG
  create-git-tag:
    if: github.event.inputs.dryVersion != 'true' && github.event_name != 'schedule' && needs.merge-release-branch-into-develop.result == 'success'
    needs: [create-release-branch, merge-release-branch-into-develop]
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: packages/core
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: testing-holy-grail
          fetch-depth: 0 # Fetch all branches
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }} # Use the token for authentication

      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ github.event.inputs.nodeVersion }}
          registry-url: 'https://registry.npmjs.org'

      - name: Set up Git for authentication
        run: |
          git config --global user.name "Tegel - Scania"
          git config --global user.email "tegel.design.system@gmail.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}

      - name: Core - Create git tag
        run: git tag @scania/tegel@${{ needs.create-release-branch.outputs.version }}

      - name: Core - Push git tag
        run: git push --no-verify origin @scania/tegel@${{ needs.create-release-branch.outputs.version }}

  #MERGE DEVELOP INTO MAIN
  merge-develop-into-main:
    needs: [create-release-branch, create-git-tag, merge-release-branch-into-develop]
    runs-on: ubuntu-latest
    if: github.event.inputs.dryVersion != 'true' && needs.create-git-tag.result == 'success' && needs.merge-release-branch-into-develop.result == 'success' && github.event_name != 'schedule'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: testing-holy-grail
          fetch-depth: 0 # Fetch all branches
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

      - name: Fetch all branches
        run: git fetch --all

      - name: Set up Git for authentication
        run: |
          git config --global user.name "Tegel - Scania"
          git config --global user.email "tegel.design.system@gmail.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}

      # Sync develop and main is done with reset to avoid merge conflicts
      - name: Sync develop and main
        run: |
          git checkout main
          git reset --hard develop
          git push --force --no-verify origin main

  notify-teams:
    needs:
      [
        create-release-branch,
        release-core,
        bump-wrappers-to-new-version,
        release-angular,
        release-angular-17,
        release-react,
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Teams
        run: |
          version="${{ needs.create-release-branch.outputs.version }}"
          dry="${{ github.event.inputs.dryVersion == 'true' || github.event_name == 'schedule' }}"

          # Detect any failed jobs
          if [ "${{ needs.create-release-branch.result }}" == "failure" ] || \
             [ "${{ needs.release-core.result }}" == "failure" ] || \
             [ "${{ needs.bump-wrappers-to-new-version.result }}" == "failure" ] || \
             [ "${{ needs.release-angular.result }}" == "failure" ] || \
             [ "${{ needs.release-angular-17.result }}" == "failure" ] || \
             [ "${{ needs.release-react.result }}" == "failure" ]; then
            status="🔴 *Tegel Release ${version}* failed"
          else
            status="🟢 *Tegel Release ${version}* succeeded"
          fi

          # Append dry-run info
          if [ "$dry" == "true" ]; then
            status="$status _(dry run)_"
          fi

          curl -H 'Content-Type: application/json' \
            -d "{\"text\": \"$status\"}" \
            ${{ secrets.TEAMS_WEBHOOK }}
