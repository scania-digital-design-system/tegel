@import './tl-textarea-mixins';
@import './tl-textarea-vars';
@import '../../../../../../typography/mixins/type-styles';

.tl-textarea {
  padding-bottom: 1px;
  display: block;
  min-width: 208px;

  &--no-min-width {
    min-width: auto;
  }

  &--label-inside {
    @include focus-input-state {
      @include detail-07;

      transition: 0.1s ease all;
    }

    // Size-specific positioning when focused or has content
    @include focus-input-state {
      top: 8px;
    }
  }
}

// Elements
.tl-textarea__wrapper {
  padding-bottom: 1px;
  position: relative;
  width: 100%;
  min-width: 100%;

  &::after {
    background: var(--textarea-bar);
    content: '';
    height: 2px;
    width: 100%;
    bottom: 0;
    position: absolute;
    transform: scaleX(0);
    transition: 0.35s ease transform;
  }
}

.tl-textarea__content {
  position: relative;
  width: 100%;
  display: flex;
  align-items: flex-start;
  height: 100%;
}

.tl-textarea__input {
  @include textarea-base;
  @include detail-02;

  border-radius: var(--textarea-border-radius);
  padding: var(--tds-spacing-element-20) var(--tds-spacing-element-16);
  display: block;
  resize: vertical;
  @include box-shadow;

  transition: box-shadow 200ms ease;
  flex: 1;
  order: 2;
  position: relative;

  &::-webkit-resizer {
    display: none;
  }
}

.tl-textarea__label-outside {
  > * {
    @include detail-05;

    display: block;
    margin-bottom: var(--tds-spacing-element-8);
    color: var(--textarea-label);
  }
}

.tl-textarea__bar {
  position: relative;
  width: 100%;
  left: 0;
  z-index: 1;

  &::after {
    background: var(--textarea-bar);
    content: '';
    height: 2px;
    width: 100%;
    bottom: 0;
    position: absolute;
    transform: scaleX(0);
    transition: 0.35s ease transform;
  }
}

.tl-textarea__helper {
  @include detail-05;

  display: flex;
  gap: 8px;
  align-items: center;
  padding-top: var(--tds-spacing-element-4);
  color: var(--textarea-helper);
  flex-grow: 2;
  flex-basis: auto;

  ~ .tl-textarea__textcounter {
    flex-basis: auto;
  }
}

.tl-textarea__textcounter {
  @include detail-05;

  color: var(--textarea-textcounter);
  float: right;
  flex-basis: 100%;
  text-align: right;
  padding-top: var(--tds-spacing-element-4);
}

.tl-textarea__resizer-icon {
  color: var(--textarea-resize-icon);
  position: absolute;
  display: block;
  bottom: 2px;
  right: 2px;
  width: 16px;
  height: 16px;
  pointer-events: none;
  background-color: var(--textarea-background);
  z-index: 1;

  svg {
    display: block;
    width: 100%;
    height: 100%;
  }
}

.tl-textarea__icon-readonly {
  display: none;
  position: absolute;
  right: 18px;
  top: 18px;
  z-index: 1;
}

// Focus state
.tl-textarea__content:has(.tl-textarea__input:focus):not(.tl-textarea--disabled)
.tl-textarea__wrapper {
  outline: var(--textarea-focus-outline);
  outline-offset: var(--textarea-focus-outline-offset);
}

// Bar animation on focus
.tl-textarea__content:has(.tl-textarea__input:focus):not(.tl-textarea--disabled)
~ .tl-textarea__bar::after {
  transform: scaleX(1);
}

// Error state bar animation on focus
.tl-textarea--error
.tl-textarea__content:has(.tl-textarea__input:focus):not(.tl-textarea--disabled)
~ .tl-textarea__bar::after {
  background: var(--textarea-bar-error);
  transform: scaleX(1);
}

// Error state focus
.tl-textarea__content:has(.tl-textarea__input:focus).tl-textarea--error:not(.tl-textarea--disabled)
.tl-textarea__wrapper {
  outline: var(--textarea-focus-outline-error);
  outline-offset: var(--textarea-focus-outline-offset);
}

// No min width modifier - affects wrapper
.tl-textarea__wrapper {
  .tl-textarea--no-min-width & {
    min-width: auto;
  }
}

// Label inside modifier - affects elements
.tl-textarea__label-inside {
  .tl-textarea--label-inside & {
    @include detail-02;

    transition: 0.1s ease all;
    color: var(--textarea-label-inside);
    position: absolute;
    top: var(--tds-spacing-element-20);
    left: var(--tds-spacing-element-16);
    z-index: 1;
  }
}

.tl-textarea__input {
  .tl-textarea--label-inside & {
    @include placeholder-label;

    padding-top: var(--tds-spacing-element-24);
    padding-bottom: 15px;
  }
}

// Disabled state - modifier styles in affected elements
.tl-textarea {
  .tl-textarea--disabled & {
    cursor: not-allowed;
  }
}

.tl-textarea__wrapper {
  .tl-textarea--disabled & {
    pointer-events: none;
  }
}

.tl-textarea__input {
  .tl-textarea--disabled & {
    @include box-shadow('disabled');

    pointer-events: none;
    user-select: none;
    background-color: var(--textarea-disabled-background);
    box-shadow: none !important;
    border-bottom: none !important;
  }
}

.tl-textarea__label,
.tl-textarea__label-outside > * {
  .tl-textarea--disabled & {
    color: var(--textarea-disabled-label);
  }
}

.tl-textarea__helper {
  .tl-textarea--disabled & {
    color: var(--textarea-helper-disabled);
  }
}

.tl-textarea__textcounter {
  .tl-textarea--disabled & {
    color: var(--textarea-textcounter-disabled);
  }
}

.tl-textarea__icon-readonly {
  .tl-textarea--disabled & {
    color: var(--textarea-disabled-label);
  }
}

.tl-textarea__label-inside {
  .tl-textarea--disabled.tl-textarea--label-inside & {
    transform: translateY(0);
    color: var(--textarea-disabled-label);
  }
}

.tl-textarea__input::placeholder {
  .tl-textarea--disabled.tl-textarea--label-inside & {
    visibility: hidden;
  }
}

// Read only state - modifier styles in affected elements
.tl-textarea__icon-readonly {
  .tl-textarea--readonly & {
    display: block;
  }
}

.tl-textarea__input {
  .tl-textarea--readonly & {
    @include box-shadow('read-only');
  }

  .tl-textarea--readonly:has(.tl-textarea__icon-readonly) & {
    padding-right: 54px;
  }
}

.tl-textarea__wrapper {
  .tl-textarea--readonly & {
    background-color: transparent;
  }
}

// Success state - modifier styles in affected elements
.tl-textarea__input {
  .tl-textarea--success:not(.tl-textarea--readonly):not(.tl-textarea--disabled) & {
    @include box-shadow('success');
  }
}

// Error state - modifier styles in affected elements
.tl-textarea__helper {
  .tl-textarea--error:not(.tl-textarea--readonly):not(.tl-textarea--disabled) & {
    color: var(--textarea-helper-error);
  }
}

.tl-textarea__input {
  .tl-textarea--error:not(.tl-textarea--readonly):not(.tl-textarea--disabled) & {
    @include box-shadow('error');
  }
}

.tl-textarea__wrapper::after {
  .tl-textarea--error:not(.tl-textarea--readonly):not(.tl-textarea--disabled) & {
    background: var(--textarea-bar-error) !important;
  }
}

.tl-textarea__bar::after {
  .tl-textarea--error:not(.tl-textarea--readonly):not(.tl-textarea--disabled) & {
    background: var(--textarea-bar-error) !important;
  }
}
