
.tl-dropdown__list {
  margin: 0;
  padding: 0;
  list-style: none;
  position: absolute;
  left: 0;
  right: 0;
  z-index: 10;
  background: var(--tds-dropdown-bg, #fff);
  border: 1px solid var(--tds-dropdown-border-bottom, #ccc);
  border-radius: var(--tds-dropdown-border-radius, 4px);
  box-shadow: 0 2px 8px #0001;
  max-height: 240px;
  overflow-y: auto;
  display: block;
  width: 100%;
}

.tl-dropdown__list[style*="display: none"] {
  display: none !important;
}

.tl-dropdown__option[aria-disabled="true"] {
  color: var(--dropdown-option-disabled, #aaa);
  cursor: not-allowed;
  background: none;
}

// Tegel Light custom dropdown (button-based)
.tl-dropdown__button {
  @include detail-02;

  width: 100%;
  background: var(--tds-dropdown-bg);
  color: var(--tds-dropdown-value-color);
  border: none;
  border-bottom: 1px solid var(--tds-dropdown-border-bottom);
  border-radius: var(--tds-dropdown-border-radius);
  box-shadow: none;
  padding: 0 var(--tds-spacing-element-16);
  padding-right: 40px;
  text-align: left;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 8px;
  cursor: pointer;
  transition: border-bottom-color 0.2s;
  position: relative;
  font-family: inherit;
  font-size: inherit;
  outline: none;

  .tl-icon--chevron_down {
    position: absolute;
    right: 16px;
    top: 0;
    bottom: 0;
    margin: auto 0;
    height: 16px;
    pointer-events: none;
    transform: none;
    display: flex;
    align-items: center;
  }
}

.tl-dropdown--lg .tl-dropdown__button {
  min-height: 56px;
  font-size: 1rem;
}

.tl-dropdown--md .tl-dropdown__button {
  min-height: 48px;
  font-size: 0.9375rem;
}

.tl-dropdown--sm .tl-dropdown__button {
  min-height: 40px;
  font-size: 0.875rem;
}

.tl-dropdown__button:focus,
.tl-dropdown__button:focus-visible {
  border-bottom-color: var(--tds-dropdown-border-bottom-hover);
}

.tl-dropdown--error .tl-dropdown__button {
  border-bottom-color: var(--tds-dropdown-error);
}

.tl-dropdown--disabled .tl-dropdown__button {
  color: var(--tds-dropdown-disabled-color);
  background: var(--tds-dropdown-bg);
  border-bottom-color: transparent;
  cursor: not-allowed;
  pointer-events: none;
}

.tl-dropdown__list {
  margin: 0;
  padding: 0;
  list-style: none;
  position: absolute;
  left: 0;
  right: 0;
  z-index: 10;
  background: var(--tds-dropdown-bg, #fff);
  border: 1px solid var(--tds-dropdown-border-bottom, #ccc);
  border-radius: var(--tds-dropdown-border-radius, 4px);
  box-shadow: 0 2px 8px #0001;
  max-height: 240px;
  overflow-y: auto;
  display: block;
}

.tl-dropdown__option {
  @include detail-02;

  padding: 12px var(--tds-spacing-element-16);
  cursor: pointer;
  color: var(--tds-dropdown-value-color);
  background: none;
  border: none;
  text-align: left;
  width: 100%;
  box-sizing: border-box;
  transition: background 0.15s, color 0.15s;
  outline: none;
  font-family: inherit;
  font-size: inherit;
}

.tl-dropdown__option:hover,
.tl-dropdown__option:focus {
  background: var(--dropdown-option-background-hover, #f3f3f3);
}

.tl-dropdown__option[aria-disabled="true"] {
  color: var(--dropdown-option-disabled, #aaa);
  cursor: not-allowed;
  background: none;
}

.tl-dropdown__option[aria-selected="true"] {
  background: var(--dropdown-option-background-selected, #e6f0fa);
  color: var(--tds-dropdown-value-color);
}
@import './tl-dropdown_vars';
@import '../tl-icon/tl-icon';
@import '../../../../../../typography/mixins/type-styles';

.tl-dropdown {
  display: block;
  min-width: 208px;
  position: relative;

  --dropdown-chevron-offset: calc(-50%);
  --dropdown-bar-color: var(--color-foreground-border-accent-focus);
  --dropdown-bar-base-color: var(--tds-grey-850);
  --dropdown-label-top: 50%;
  --dropdown-label-left: var(--tds-spacing-element-16);
  --dropdown-label-transform: translateY(var(--dropdown-chevron-offset));
  --dropdown-icon-size: 16px;

  // Chevron icon rendered via CSS mask to avoid extra markup
  // &::after {
  //   content: '';
  //   position: absolute;
  //   inset-block-start: 50%;
  //   inset-inline-end: var(--tds-spacing-element-16);
  //   width: var(--dropdown-icon-size);
  //   height: var(--dropdown-icon-size);
  //   pointer-events: none;
  //   transform: translateY(var(--dropdown-chevron-offset));
  //   background-color: var(--dropdown-icon);
  //   mask-image: var(--icon-chevron_down-svg);
  //   mask-repeat: no-repeat;
  //   mask-position: center;
  //   mask-size: contain;
  //   /* stylelint-disable property-no-vendor-prefix */
  //   -webkit-mask-image: var(--icon-chevron_down-svg);
  //   -webkit-mask-repeat: no-repeat;
  //   -webkit-mask-position: center;
  //   -webkit-mask-size: contain;
  //   /* stylelint-enable property-no-vendor-prefix */
  // }

  // Size modifiers handled within element blocks
}

.tl-dropdown:not(.tl-dropdown--no-label):not(.tl-dropdown--label-inside):not(
:has(.tl-dropdown__helper)
) {
  --dropdown-chevron-offset: calc(-50% + 10px);
}

.tl-dropdown--no-label:has(.tl-dropdown__helper),
.tl-dropdown--label-inside:has(.tl-dropdown__helper) {
  --dropdown-chevron-offset: calc(-50% - 10px);
}

.tl-dropdown--no-min-width {
  min-width: auto;
}

.tl-dropdown--disabled {
  pointer-events: none;

  --dropdown-text: var(--tds-dropdown-disabled-color);
  --dropdown-helper-text: var(--tds-dropdown-disabled-color);
  --dropdown-placeholder: var(--tds-dropdown-disabled-color);
  --dropdown-icon: var(--tds-dropdown-disabled-color);
  --dropdown-bar-color: transparent;
  --dropdown-bar-base-color: var(--color-foreground-border-soft);
  --dropdown-border: var(--dropdown-border-disabled);
  --dropdown-border-hover: var(--dropdown-border-disabled);
}

/* TDS-like appearance modifier: boxed input like the webcomponent tds-dropdown */
.tl-dropdown--tds {
  --dropdown-bar-color: transparent;
  --dropdown-bar-base-color: transparent;

  /* Use a full rectangle border instead of underline */
  --dropdown-border: 0 0 0 1px var(--tds-dropdown-border-bottom);
  --dropdown-border-hover: 0 0 0 1px var(--tds-dropdown-border-bottom-hover);
  --dropdown-border-focus: 0 0 0 2px var(--dropdown-bar-color);
  --dropdown-border-active: 0 0 0 1px var(--tds-dropdown-border-bottom-hover);

  /* Slightly more rounded for boxed appearance */
  --dropdown-border-radius: var(--tds-dropdown-border-radius);

  /* Shift chevron vertically to center inside box */
  --dropdown-chevron-offset: calc(-50%);

  /* Ensure icon color matches token */
  --dropdown-icon: var(--tds-dropdown-menu-icon-color);

  /* Hide the CSS-generated chevron icon for the TDS boxed variant (we render an icon element instead) */
  &::after {
    display: none;
  }

  /* Extra safety: if a .menu-icon or an input exists inside the dropdown, hide the CSS chevron */
  &.tl-dropdown--tds::after,
  &:has(.menu-icon)::after,
  &:has(input)::after {
    display: none !important;
  }

  .tl-dropdown__bar::before,
  .tl-dropdown__bar::after {
    display: none;
  }

  /* Field adjustments for boxed look */

  /* Make the .filter wrapper the visible box so icons can sit inside it */
  .filter {
    background-color: var(--tds-dropdown-bg);
    border: none;
    box-shadow: var(--dropdown-border);
    border-radius: var(--dropdown-border-radius);
    min-height: 48px;
    height: auto;
    padding-inline-start: var(--tds-spacing-element-16);
    padding-inline-end: calc(
      var(--tds-spacing-element-16) + var(--dropdown-icon-size) + var(--tds-spacing-element-8)
    );
    display: flex;
    align-items: center;
    position: relative;
  }

  /* Value wrapper should fill the left area and not include the icon padding */
  .filter .value-wrapper {
    padding-right: 0;
    display: flex;
    align-items: center;
    width: 100%;
  }

  /* Input inside the value-wrapper should be transparent and full width */
  .value-wrapper input {
    background: transparent !important;
    border: none !important;
    box-shadow: none !important;
    padding: 0 !important;
    margin: 0 !important;
    width: 100% !important;
    height: 100% !important;
    line-height: normal !important;
  }

  &.tl-dropdown--label-inside :is(.tl-dropdown__input, .tl-dropdown__select) {
    padding-top: calc(var(--tds-spacing-element-12));
  }

  &:has(:is(.tl-dropdown__input, .tl-dropdown__select):focus):not(.tl-dropdown--disabled)
  :is(.tl-dropdown__input, .tl-dropdown__select) {
    box-shadow: var(--dropdown-border-focus);
  }

  /* Icon & filter layout: position icons inside the field to the right */
  .filter {
    position: relative;
    display: block;
  }

  .filter .value-wrapper {
    /* ensure input/value takes full width but leaves room for icons */
    padding-right: calc(var(--dropdown-icon-size) * 2 + var(--tds-spacing-element-24));
    display: flex;
    align-items: center;
  }

  /* tds-icon elements inside the .filter should be absolutely positioned */
  .filter tds-icon.menu-icon {
    position: absolute !important;
    right: var(--tds-spacing-element-16) !important;
    top: 50% !important;
    transform: translateY(-50%) !important;
    color: var(--tds-dropdown-menu-icon-color) !important;
    pointer-events: auto !important;
    z-index: 3 !important;
    width: var(--dropdown-icon-size) !important;
    height: var(--dropdown-icon-size) !important;
    display: block !important;
  }

  .filter tds-icon.clear-icon {
    position: absolute !important;

    /* place to the left of the menu icon */
    right: calc(
      var(--tds-spacing-element-16) + var(--dropdown-icon-size) + var(--tds-spacing-element-8)
    ) !important;
    top: 50% !important;
    transform: translateY(-50%) !important;
    color: var(--tds-dropdown-clear-icon-color) !important;
    pointer-events: auto !important;
    z-index: 3 !important;
    width: var(--dropdown-icon-size) !important;
    height: var(--dropdown-icon-size) !important;
    display: block !important;
  }

  /* Ensure the input fills the wrapper but doesn't overlap the icons */
  .value-wrapper input,
  .value-wrapper .placeholder,
  .value-wrapper .placeholder * {
    box-sizing: border-box !important;
    width: 100% !important;
    z-index: 1 !important;
  }

  /* Make the filter wrapper show pointer to indicate dropdown behaviour; keep caret for text input on focus */
  .filter {
    cursor: pointer;
  }
}

.tl-dropdown--error:not(.tl-dropdown--disabled) {
  --dropdown-border: var(--dropdown-border-error);
  --dropdown-border-hover: var(--dropdown-border-error-hover);
  --dropdown-helper-text: var(--dropdown-error);
  --dropdown-bar-color: var(--dropdown-error);
  --dropdown-bar-base-color: var(--dropdown-error);
}

.tl-dropdown--label-inside {
  position: relative;
}

// Label element
.tl-dropdown__label {
  @include detail-05;

  color: var(--dropdown-text);
  display: block;
  margin-bottom: var(--tds-spacing-element-4);
}

.tl-dropdown__label--inside {
  @include detail-02;

  position: absolute;
  pointer-events: none;
  transform-origin: top left;
  top: var(--dropdown-label-top);
  left: var(--dropdown-label-left);
  transform: var(--dropdown-label-transform, translateY(var(--dropdown-chevron-offset)));
  transition: transform 0.1s ease, font-size 0.1s ease, color 0.1s ease, top 0.1s ease;
  z-index: 1;
  color: var(--dropdown-label-inside);
}

.tl-dropdown--disabled .tl-dropdown__label {
  color: var(--color-foreground-text-disabled);
}

.tl-dropdown--sm {
  --dropdown-label-left: var(--tds-spacing-element-12);
}

.tl-dropdown:has(:is(.tl-dropdown__input, .tl-dropdown__select) option:not([value='']):checked) {
  --dropdown-label-transform: translateY(0);
  --dropdown-label-top: calc(var(--tds-spacing-element-8) - var(--tds-spacing-element-4));
  --dropdown-label-left: var(--tds-spacing-element-16);
}

.tl-dropdown:has(:is(.tl-dropdown__input, .tl-dropdown__select) option:not([value='']):checked)
.tl-dropdown__label--inside {
  @include detail-07;
}

.tl-dropdown--lg:has(
:is(.tl-dropdown__input, .tl-dropdown__select) option:not([value='']):checked
) {
  --dropdown-label-top: calc(var(--tds-spacing-element-16) - var(--tds-spacing-element-4));
}

.tl-dropdown--md:has(
:is(.tl-dropdown__input, .tl-dropdown__select) option:not([value='']):checked
) {
  --dropdown-label-top: calc(var(--tds-spacing-element-12) - var(--tds-spacing-element-4));
}

.tl-dropdown--sm:has(:is(.tl-dropdown__input, .tl-dropdown__select) option:not([value='']):checked)
.tl-dropdown__label--inside {
  display: none;
}

// Input adjustments when label is displayed inside the field
.tl-dropdown--label-inside :is(.tl-dropdown__input, .tl-dropdown__select) {
  padding-top: var(--tds-spacing-element-20);
  padding-bottom: 12px;
  line-height: calc(56px - var(--tds-spacing-element-20) - 12px);
}

// Shared base styles for dropdown fields
%tl-dropdown-field {
  @include detail-02;

  width: 100%;
  appearance: none;
  background-color: var(--tds-dropdown-bg);
  color: var(--tds-dropdown-value-color);
  border: none;
  border-bottom: 1px solid var(--tds-dropdown-border-bottom);
  border-radius: var(--tds-dropdown-border-radius);
  box-shadow: none;
  min-height: 56px;
  height: 56px;
  line-height: 56px;
  padding: 0 var(--tds-spacing-element-16);
  padding-right: calc(var(--tds-spacing-element-16) + var(--dropdown-icon-size));
  transition: border-bottom-color 0.2s ease;

  .tl-dropdown--lg.tl-dropdown--label-inside & {
    padding-top: var(--tds-spacing-element-24);
    padding-bottom: 15px;
    line-height: calc(56px - var(--tds-spacing-element-24) - 15px);
  }

  .tl-dropdown--md & {
    min-height: 48px;
    height: 48px;
    line-height: 48px;
    padding: 0 var(--tds-spacing-element-16);
    padding-right: calc(var(--tds-spacing-element-16) + var(--dropdown-icon-size));
  }

  .tl-dropdown--md.tl-dropdown--label-inside & {
    padding-top: var(--tds-spacing-element-20);
    padding-bottom: 11px;
    line-height: calc(48px - var(--tds-spacing-element-20) - 11px);
  }

  .tl-dropdown--sm & {
    min-height: 40px;
    height: 40px;
    line-height: 40px;
    padding: 0 var(--tds-spacing-element-12);
    padding-right: calc(var(--tds-spacing-element-12) + var(--dropdown-icon-size));
  }

  .tl-dropdown--sm.tl-dropdown--label-inside & {
    padding-top: var(--tds-spacing-element-16);
    padding-bottom: var(--tds-spacing-element-8);
    line-height: calc(40px - var(--tds-spacing-element-16) - var(--tds-spacing-element-8));
  }

  .tl-dropdown--sm.tl-dropdown--label-inside:has(
  :is(.tl-dropdown__input, .tl-dropdown__select) option:not([value='']):checked
)
  & {
    padding-top: 0;
    padding-bottom: 0;
    line-height: 40px;
  }

  &:hover {
    border-bottom-color: var(--tds-dropdown-border-bottom-hover);
  }

  &:focus,
  &:focus-visible {
    outline: none;
    box-shadow: none;
    border-bottom-color: var(--tds-dropdown-border-bottom-hover);
  }

  &:disabled {
    background-color: var(--tds-dropdown-bg);
    color: var(--tds-dropdown-disabled-color);
    border-bottom-color: transparent;
    cursor: not-allowed;
  }

  .tl-dropdown--error & {
    border-bottom-color: var(--tds-dropdown-error);
  }

  .tl-dropdown--disabled & {
    color: var(--tds-dropdown-disabled-color);
    border-bottom-color: transparent;
    pointer-events: none;
  }

  //  Option styling reference (works on some browsers, e.g. Windows Chromium/Firefox)
  option {
    color: var(--dropdown-option-text);
    background-color: var(--dropdown-option-background);
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    text-align: left;
    padding-inline: var(--tds-spacing-element-16);
    padding-block: var(--tds-spacing-element-4);
  }

  option:checked,
  option[selected] {
    background-color: var(--dropdown-option-background-selected);
  }

  option:disabled {
    color: var(--dropdown-option-disabled);
    background-color: var(--dropdown-option-background);
  }

  option:hover {
    background-color: var(--dropdown-option-background-hover);
  }
}

// Custom dropdown input (styled <select>)
.tl-dropdown__input {
  @extend %tl-dropdown-field;

  &::placeholder {
    color: var(--dropdown-placeholder);
  }

  /* The input as a whole should show pointer for dropdown behaviour; when focused, caret appears */
  cursor: pointer;

  &:focus {
    cursor: text;
  }
}

// Native <select> aligned with custom styling
.tl-dropdown__select {
  @extend %tl-dropdown-field;

  cursor: pointer;
}

/* Also ensure the dropdown wrapper/button shows pointer */
.tl-dropdown {
  cursor: pointer;
}

// Focus state - animate underline when input is focused
.tl-dropdown:has(:is(.tl-dropdown__input, .tl-dropdown__select):focus):not(.tl-dropdown--disabled)
.tl-dropdown__bar::after {
  transform: scaleX(1);
}

// Disabled icon
.tl-dropdown--disabled::after {
  background-color: var(--color-foreground-icon-disabled);
}

// Disabled underline
.tl-dropdown--disabled .tl-dropdown__bar::after {
  transform: scaleX(0) !important;
}

.tl-dropdown:has(:is(.tl-dropdown__input, .tl-dropdown__select) option[value='']:checked)
:is(.tl-dropdown__input, .tl-dropdown__select) {
  color: var(--dropdown-placeholder);
}

// Animated underline
.tl-dropdown__bar {
  position: relative;
  width: 100%;
  height: 0;
  z-index: 1;

  &::before {
    content: '';
    position: absolute;
    inset-block-end: 0;
    inset-inline-start: 0;
    height: 1px;
    inline-size: 100%;
    background-color: var(--dropdown-bar-base-color);
    z-index: 0;
  }

  &::after {
    content: '';
    position: absolute;
    inset-block-end: 0;
    inset-inline-start: 0;
    height: 2px;
    background-color: var(--dropdown-bar-color);
    inline-size: 100%;
    transform: scaleX(0);
    transform-origin: center;
    transition: transform 0.35s ease;
    z-index: 1;
  }
}

.tl-dropdown__helper {
  @include detail-05;

  color: var(--dropdown-helper-text);
  padding-top: var(--tds-spacing-element-4);
  display: flex;
  gap: 8px;
  flex-basis: 100%;

  .tl-dropdown--disabled & {
    color: var(--color-foreground-text-disabled);
  }
}
