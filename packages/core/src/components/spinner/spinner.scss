@import '../../mixins/box-sizing';

:host {
  @include tds-box-sizing;

  display: block;
}

/* Size configuration */
$spinner-sizes: (
  xs: (
    radius: 8px,
    stroke-width: 3px,
    speed: 1.8s,
  ),
  sm: (
    radius: 12px,
    stroke-width: 4px,
    speed: 1.8s,
  ),
  md: (
    radius: 26px,
    stroke-width: 6px,
    speed: 1.8s,
  ),
  lg: (
    radius: 42px,
    stroke-width: 8px,
    speed: 2s,
  ),
);

/* Animation mixin */
@mixin spinner-animation($duration) {
  animation: dash $duration cubic-bezier(0.55, 0.15, 0.45, 0.85) infinite;
}

.tds-spinner-svg {
  /* Component variables */
  --radius: var(--radius-lg);
  --stroke-width: var(--stroke-width-lg);
  --animation-speed: var(--speed-lg);
  --PI: 3.14159265358979;

  display: block;
  width: calc(var(--radius) * 2);
  height: calc(var(--radius) * 2);
  transform: scale(-1, 1) rotate(-90deg);

  /* Generate size variants */
  @each $size, $config in $spinner-sizes {
    &-#{$size} {
      --radius: #{map-get($config, radius)};
      --stroke-width: #{map-get($config, stroke-width)};
      --animation-speed: #{map-get($config, speed)};
    }
  }
}

.tds-spinner-circle {
  /* Circle configuration */
  cx: var(--radius);
  cy: var(--radius);
  r: calc(var(--radius) - (var(--stroke-width) / 2));
  fill: none;

  /* Stroke configuration */
  --stroke-dash: calc((2 * var(--PI)) * var(--radius));

  stroke-dasharray: var(--stroke-dash);
  stroke-width: var(--stroke-width);
  @include spinner-animation(var(--animation-speed));

  /* Color variants */
  &-standard {
    stroke: var(--spinner-background);
  }

  &-inverted {
    stroke: var(--spinner-background-inverted);
  }
}

@keyframes dash {
  from {
    stroke-dashoffset: calc(-1 * var(--stroke-dash));
  }

  to {
    stroke-dashoffset: var(--stroke-dash);
  }
}
