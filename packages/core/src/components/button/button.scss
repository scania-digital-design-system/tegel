// TODO: Refactor this code so it is more readable and easy to maintain

@import '../../mixins/box-sizing';
@import '../../../../../typography/utilities/typography-utility';
@import './button-mixins';

$btn-lg-height: 56px;
$btn-md-height: 48px;
$btn-sm-height: 40px;
$btn-xs-height: 24px;
$btn-sm-only-icon-padding: 11px;
$btn-md-only-icon-padding: 13px;
$btn-lg-only-icon-padding: 17px;
$types: (primary, secondary, ghost, danger);
$props: (background, border-color, color, outline-color);
$iconProps: (fill, color);

@mixin button-base {
  @include tds-box-sizing;

  @include detail-02;

  display: inline-flex;
  align-items: center;
  border-radius: var(--button-radius);
  border: none;
  box-shadow: none;
  position: relative;
  text-decoration: none;
  cursor: pointer;
}

@mixin button-states($state, $suffix: '') {
  @each $type in $types {
    &.#{$type} {
      @each $prop in $props {
        #{$prop}: var(--button-#{$type}-#{$prop}#{$suffix});
      }

      &.icon {
        @each $prop in $iconProps {
          fill: var(--button-icon-#{$type}-#{$prop});
          color: var(--button-icon-#{$type}-#{$prop});
        }
      }

      &:not(.disabled) {
        ::slotted([slot='icon']) {
          @each $prop in $iconProps {
            fill: var(--button-icon-#{$type}-#{$prop});
            color: var(--button-icon-#{$type}-#{$prop});
          }
        }
      }
    }
  }
}

@mixin tds-focus-state {
  outline: var(--button-outline-width) solid var(--color-foreground-border-accent-focus);
  outline-offset: calc(var(--button-outline-width) * -1);
}

@mixin icon-slot($size, $margin, $dimension) {
  &.#{$size}::slotted([slot='icon']) {
    margin-left: var(--tds-spacing-element-#{$margin});
    width: var(--tds-spacing-element-#{$dimension});
    height: var(--tds-spacing-element-#{$dimension});
  }
}

@mixin button-size($size, $padding, $height, $icon-padding, $only-icon-padding) {
  &.#{$size} {
    padding: $padding;
    height: $height;

    &.icon {
      padding: $icon-padding;
    }

    &.only-icon {
      padding: $only-icon-padding;
    }
  }
}

button {
  @include button-base;

  height: $btn-lg-height;
  padding: var(--tds-spacing-element-20);
  border: 1px solid;

  &:focus {
    outline: none;
  }

  // Default state
  @include button-states('default');

  // Hover state
  &:hover {
    @include button-states('hover', '-hover');
  }

  &:focus-visible {
    @include tds-focus-state;
    @include button-states('focus', '-focus');

    @each $type in $types {
      &.#{$type} {
        @include focus-styles($type);
      }
    }
  }

  // Active state
  &:active,
  &.active {
    @include button-states('active', '-active');
  }

  // Disabled state
  &.disabled,
  &:disabled {
    @include button-states('disabled', '-disabled');
  }

  @include button-size(
    'xs',
    var(--tds-spacing-element-4) var(--tds-spacing-element-8),
    $btn-xs-height,
    null,
    null
  );

  @include button-size(
    'sm',
    var(--tds-spacing-element-12),
    $btn-sm-height,
    10px var(--tds-spacing-element-12),
    $btn-sm-only-icon-padding
  );

  @include button-size(
    'md',
    var(--tds-spacing-element-16),
    $btn-md-height,
    14px var(--tds-spacing-element-16),
    $btn-md-only-icon-padding
  );

  @include button-size(
    'lg',
    var(--tds-spacing-element-20),
    $btn-lg-height,
    18px var(--tds-spacing-element-20),
    $btn-lg-only-icon-padding
  );

  &.fullbleed {
    width: 100%;
    display: flex;
    justify-content: center;
  }

  &.animation-fade {
    transition: background-color var(--tds-motion-duration-fast-02) var(--tds-motion-easing-scania);
  }
}

:host(tds-button) {
  display: inline-flex;
  align-items: center;
}

:host(.disabled:active) {
  pointer-events: none;
}

:host(.disabled) button {
  cursor: not-allowed;
}

:host(.fullbleed) {
  width: 100%;
  justify-content: center;
}

tds-button {
  button {
    display: inline-flex;
    align-items: center;

    @include icon-slot('sm', 12, 16);
    @include icon-slot('md', 16, 20);
    @include icon-slot('lg', 20, 20);

    &.only-icon::slotted([slot='icon']) {
      margin-left: 0;
    }
  }
}
