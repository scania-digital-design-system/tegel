@import './spinner-vars';
@import '../../mixins/box-sizing';

:host {
  @include tds-box-sizing;

  display: block;
}

.tds-spinner-svg {
  width: calc(var(--tds-spinner-radius) * 2);
  height: calc(var(--tds-spinner-radius) * 2);
  transform: scale(-1, 1) rotate(-90deg);

  &-xs {
    --tds-spinner-radius: var(--tds-spinner-radius-xs);
    --tds-spinner-stroke-width: var(--tds-spinner-stroke-width-xs);
    --tds-spinner-animation-speed: var(--tds-spinner-speed);
  }

  &-sm {
    --tds-spinner-radius: var(--tds-spinner-radius-sm);
    --tds-spinner-stroke-width: var(--tds-spinner-stroke-width-sm);
    --tds-spinner-animation-speed: var(--tds-spinner-speed);
  }

  &-md {
    --tds-spinner-radius: var(--tds-spinner-radius-md);
    --tds-spinner-stroke-width: var(--tds-spinner-stroke-width-md);
    --tds-spinner-animation-speed: var(--tds-spinner-speed);
  }

  &-lg {
    --tds-spinner-radius: var(--tds-spinner-radius-lg);
    --tds-spinner-stroke-width: var(--tds-spinner-stroke-width-lg);
    --tds-spinner-animation-speed: var(--tds-spinner-speed-lg);
  }
}

.tds-spinner-circle {
  cx: var(--tds-spinner-radius);
  cy: var(--tds-spinner-radius);
  r: calc(var(--tds-spinner-radius) - (var(--tds-spinner-stroke-width) / 2));
  fill: none;

  //Calculation for lenght of dash
  --tds-spinner-stroke-dash: calc((2 * var(--PI)) * var(--tds-spinner-radius));

  stroke-dasharray: var(--tds-spinner-stroke-dash);
  stroke-width: var(--tds-spinner-stroke-width);
  animation: dash var(--tds-spinner-animation-speed) cubic-bezier(0.55, 0.15, 0.45, 0.85) infinite;

  &-standard {
    stroke: var(--tds-spinner-background);
  }

  &-inverted {
    stroke: var(--tds-spinner-background-inverted);
  }
}

@keyframes dash {
  from {
    stroke-dashoffset: calc(-1 * var(--tds-spinner-stroke-dash));
  }

  to {
    stroke-dashoffset: var(--tds-spinner-stroke-dash);
  }
}
